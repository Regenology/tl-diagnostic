#!/usr/bin/python

"""
Python Timelapse Diagnostic Tool
"""


import subprocess
import datetime
import time
import sys
import os


class DiagnosticClient(object):

    def __init__(self, picture_interval=None):
        
        if not 'diagnose' in sys.argv[0]:
            self.return_error('Just run it without the python bit, I made it that way!')
        
        if os.getuid() != 0:
            self.return_error('You must run the diagnostic tool as root damnit!')

        self.diagnostic_data = {}

        self.start_time = datetime.datetime.now()
        
        if len(sys.argv) > 1:
            try:
                self.picture_interval = int(sys.argv[1])
            except:
                self.return_error('Please enter a valid picture interval')
        else:
            self.picture_interval = 6

        self.uptime_data = {}

    def writer(self):
    
        # Get the terminal looking all nice
        sys.stdout.flush()
        sys.stdout.write('\r')
        height, width = os.popen('stty size', 'r').read().split()
        # Output buffer flushed
        
        lines = [
            # text, center
            ('%s (%s x %s)' % (datetime.datetime.now(), width, height), True),
        ]
        for (text, centerise) in lines:
            padding = 0
            if centerise:
                padding = (int(width) - len(text)) / 2
            sys.stdout.write('%s%s\n' % ((padding * 'F'), text))
        for i in range((int(height)-len(lines)-1)):
            sys.stdout.write('\n')
        
        # Hold off for a bit
        time.sleep(0.5)

    def run(self):

        """
        Iterates and executes all 'diagnose_' methods belonging to instance.
        """

        while True:
            for attr in dir(self):
                attr_obj = getattr(self, attr)
                if attr.startswith('diagnose_') and callable(attr_obj):
                    attr_obj()
                self.writer()
            time.sleep(1)

    def _percentage_between_timedeltas(self, td1, td2):
        # NOTE: Maybe remove rounding
        return int((td1.total_seconds() / td2.total_seconds()) * 100)

    def report_uptime(self, identifier, up):

        """
        Makes light work of logging up/down times.
        """

        now = datetime.datetime.now()

        if not identifier in self.uptime_data:
            self.uptime_data[identifier] = {}

        if 'last_check' in self.uptime_data[identifier]:

            if not 'duration' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['duration'] = datetime.timedelta()
            self.uptime_data[identifier]['duration'] += \
                now - self.uptime_data[identifier]['last_check']

            if up:
                if not 'uptime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['uptime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['uptime'] += \
                    now - self.uptime_data[identifier]['last_check']
            else:
                if not 'downtime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['downtime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['downtime'] += \
                    now - self.uptime_data[identifier]['last_check']

            if 'uptime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['uptime_percent'] = \
                        self._percentage_between_timedeltas(
                            self.uptime_data[identifier]['uptime'],
                            self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['uptime_percent'] = 0
            if 'downtime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['downtime_percent'] = \
                    self._percentage_between_timedeltas(
                        self.uptime_data[identifier]['downtime'],
                        self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['downtime_percent'] = 0

        self.uptime_data[identifier]['last_check'] = now

    def file_contents(self, filepath):
        """
        Returns the contents of a file as a string.
        """
        try:
            f = open(filepath, 'r')
            contents = f.read()
            f.close()
            return contents
        except Exception, e:
            pass
        return ''
    
    def cmd(self, command_args):
        """
        Runs a command nice and easily.
        """
        try:
            return subprocess.check_output(command_args)
        except Exception, e:
            pass
        return ''

    def diagnose_camera_connectivity(self):

        """
        Checks the camera connection to ensure it's still there.
        """

        output = self.cmd(['/usr/bin/lsusb'])
        if 'Canon, Inc.' in output:
            connected = True
        else:
            connected = False

        self.diagnostic_data['camera_connected'] = connected
        self.report_uptime('camera_connected', connected)

    def diagnose_gphoto_process(self):
        """
        Checks if Gphoto is still running.
        """

        output = self.cmd(['/bin/ps', 'aux'])
        if 'gphoto2 --port=usb' in output:
            running = True
        else:
            running = False

        self.diagnostic_data['gphoto_running'] = running
        self.report_uptime('gphoto_running', running)

    def diagnose_storage(self):
        """
        Checks the HDD is mounted and /home/cam1/ is writable.
        """
        
        # Check mount point
        
        output = self.cmd(['/bin/mount'])
        if '/dev/sda1 on /home/cam1' in output:
            mounted = True
        else:
            mounted = False

        self.diagnostic_data['hdd_mounted'] = mounted
        self.report_uptime('hdd_mounted', mounted)
        
        # Check writability

        writable = os.access('/home/cam1', os.W_OK)

        self.diagnostic_data['cam_dir_writable'] = writable
        self.report_uptime('cam_dir_writable', writable)

    def diagnose_pictures(self):
        """
        Checks last picture taken.
        """
        pass


if __name__ == '__main__':
    diagnostic = DiagnosticClient()
    diagnostic.run()