#!/usr/bin/python

"""
Python Timelapse Diagnostic Tool
"""


import subprocess
import datetime
import signal
import curses
import time
import sys
import os


def close_handler(*args, **kwargs):
    curses.endwin()
    exit(0)
signal.signal(signal.SIGINT, close_handler)


class DiagnosticClient(object):

    def __init__(self, picture_interval=None):
        
        if not 'diagnose' in sys.argv[0]:
            self.return_error('Just run it without the python bit, I made it that way!')
        
        if os.getuid() != 0:
            self.return_error('You must run the diagnostic tool as root damnit!')

        self.diagnostic_keys = {
            'camera_connected': 'Camera connected',
            'gphoto_running': 'gPhoto running',
            'hdd_mounted': 'External drive mounted',
            'cam_dir_writable': 'Camera directory writable',
            'recent_pictures': 'Up-to-date pictures',
        }
        self.diagnostic_data = {}

        self.start_time = datetime.datetime.now()
        
        if len(sys.argv) > 1:
            try:
                self.picture_interval = int(sys.argv[1])
            except:
                self.return_error('Please enter a valid picture interval')
        else:
            self.picture_interval = 6

        self.uptime_data = {}

    def _td(self, timedelta):
        new_delta = datetime.timedelta(
            days=timedelta.days, seconds=timedelta.seconds)
        return str(new_delta)

    def _b(self, boolean, true='Yes', false='No'):
        if boolean:
            return true
        return false

    def addstr(self, stdscr, *args, **kwargs):
        try:
            stdscr.addstr(*args, **kwargs)
        except:
            pass

    def writer(self):
    
        try:
    
            stdscr = curses.initscr()
            dd = self.diagnostic_data
            ud = self.uptime_data
        
            # Get the terminal looking all nice
            height, width = os.popen('stty size', 'r').read().split()
            # Output buffer flushed
            
            lines = [
                '',
                'Timelapse Diagnostic Tool',
                datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S'),
                '',
                '',
                '',
            ]
            center_lines = [1, 2]
    
            for key, description in self.diagnostic_keys.items():
    
                progress_bar_padding = 26
                progress_bar_width = int(width) - progress_bar_padding
                udk = ud.get(key, {})
                reliability_percent = udk.get('uptime_percent', 0)
                bar_width = int(
                    progress_bar_width * (float(reliability_percent) / 100))
                progress_bar_string = bar_width * '|'
                progress_bar_string += (progress_bar_width - bar_width) * '-'
    
                reliability_uptime = udk.get('uptime', datetime.timedelta())
                reliability_downtime = udk.get(
                    'downtime', datetime.timedelta())
    
                new_lines = [
                    '   %s: %s' % (description, self._b(dd.get(key, False))),
                    '',
                    '   Reliable for: %s (unreliable for %s)' % (
                        self._td(reliability_uptime),
                        self._td(reliability_downtime)),
                    '   Reliability [%s] %s%%' % (
                        progress_bar_string, reliability_percent),
                    '', '',
                ]
                lines += new_lines
    
            lines += [
                '',
                '   Diagnostic duration: %s' % self._td(
                    udk.get('duration', datetime.timedelta())),
                '   Overall system reliability: %s%%' % ud.get(
                    'overall_uptime_percent', 0),
            ]
    
            ii = 0
            for text in lines:
                padding = 0
                if ii in center_lines:
                    padding = (int(width) - len(text)) / 2
                self.addstr(stdscr, ii, 0, '%s%s\n' % ((padding * ' '), text))
                ii += 1
            
            init_top = 6
            init_left = 3
            i = 0
            for key, description in self.diagnostic_keys.items():
                top = init_top + (i * 6)
                left = init_left
                self.addstr(
                    stdscr, top, left + len(description) + 2,
                    self._b(dd.get(key, False)), curses.A_BOLD)
                i += 1
            
            for i in range((int(height)-len(lines)-1)):
                self.addstr(stdscr, i+ii, 0, '\n')
                pass
            
            stdscr.refresh()
            
            # Hold off for a bit
            time.sleep(0.5)
            
        except Exception, e:
            pass

    def run(self):

        """
        Iterates and executes all 'diagnose_' methods belonging to instance.
        """

        while True:
            for attr in dir(self):
                attr_obj = getattr(self, attr)
                if attr.startswith('diagnose_') and callable(attr_obj):
                    attr_obj()
            self.writer()
            time.sleep(1)

    def _percentage_between_timedeltas(self, td1, td2):
        # NOTE: Maybe remove rounding
        return int((td1.total_seconds() / td2.total_seconds()) * 100)

    def report_uptime(self, identifier, up):

        """
        Makes light work of logging up/down times.
        """

        now = datetime.datetime.now()

        if not identifier in self.uptime_data:
            self.uptime_data[identifier] = {}

        if 'last_check' in self.uptime_data[identifier]:

            if not 'duration' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['duration'] = datetime.timedelta()
            self.uptime_data[identifier]['duration'] += \
                now - self.uptime_data[identifier]['last_check']

            if up:
                if not 'uptime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['uptime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['uptime'] += \
                    now - self.uptime_data[identifier]['last_check']
            else:
                if not 'downtime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['downtime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['downtime'] += \
                    now - self.uptime_data[identifier]['last_check']

            if 'uptime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['uptime_percent'] = \
                        self._percentage_between_timedeltas(
                            self.uptime_data[identifier]['uptime'],
                            self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['uptime_percent'] = 0
            if 'downtime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['downtime_percent'] = \
                    self._percentage_between_timedeltas(
                        self.uptime_data[identifier]['downtime'],
                        self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['downtime_percent'] = 0

            uptime_total = 0
            i = 1
            for key, val in self.uptime_data.items():
                if isinstance(val, dict):
                    uptime_total += val.get('uptime_percent', 0)
                    i += 1
            self.uptime_data['overall_uptime_percent'] = (
                uptime_total / i)

        self.uptime_data[identifier]['last_check'] = now

    def file_contents(self, filepath):
        """
        Returns the contents of a file as a string.
        """
        try:
            f = open(filepath, 'r')
            contents = f.read()
            f.close()
            return contents
        except Exception, e:
            pass
        return ''
    
    def cmd(self, command_args):
        """
        Runs a command nice and easily.
        """
        try:
            return subprocess.check_output(command_args)
        except Exception, e:
            pass
        return ''

    def diagnose_camera_connectivity(self):

        """
        Checks the camera connection to ensure it's still there.
        """

        output = self.cmd(['/usr/bin/lsusb'])
        if 'Canon, Inc.' in output:
            connected = True
        else:
            connected = False

        self.diagnostic_data['camera_connected'] = connected
        self.report_uptime('camera_connected', connected)

    def diagnose_gphoto_process(self):
        """
        Checks if Gphoto is still running.
        """

        output = self.cmd(['/bin/ps', 'aux'])
        if 'gphoto2 --port=usb' in output:
            running = True
        else:
            running = False

        self.diagnostic_data['gphoto_running'] = running
        self.report_uptime('gphoto_running', running)

    def diagnose_storage(self):
        """
        Checks the HDD is mounted and /home/cam1/ is writable.
        """
        
        # Check mount point
        
        output = self.cmd(['/bin/mount'])
        if '/dev/sda1 on /home/cam1' in output:
            mounted = True
        else:
            mounted = False

        self.diagnostic_data['hdd_mounted'] = mounted
        self.report_uptime('hdd_mounted', mounted)
        
        # Check writability

        writable = os.access('/home/cam1', os.W_OK)

        self.diagnostic_data['cam_dir_writable'] = writable
        self.report_uptime('cam_dir_writable', writable)

    def diagnose_pictures(self):
        """
        Checks last picture taken.
        """
        
        if os.path.exists('/home/cam1/'):
            output = self.cmd([
                '/usr/bin/find', '/home/cam1/', '-maxdepth', '1', '-cmin',
                '-%s' % self.picture_interval, '-name', '*.jpg'])
        else:
            output = ''

        if output:
            recent_pictures = True
        else:
            recent_pictures = False

        self.diagnostic_data['recent_pictures'] = recent_pictures
        self.report_uptime('recent_pictures', recent_pictures)


if __name__ == '__main__':
    diagnostic = DiagnosticClient()
    diagnostic.run()