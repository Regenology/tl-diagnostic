#!/usr/bin/python

"""
Python Timelapse Diagnostic Tool
"""


import subprocess
import datetime
import time


class DiagnosticClient(object):

    def __init__(self, picture_interval=None):
        self.diagnostic_data = {}

        self.start_time = datetime.datetime.now()
        self.picture_interval = datetime.timedelta(minutes=6)

        self.uptime_data = {}

    def run(self):

        """
        Iterates and executes all 'diagnose_' methods belonging to instance.
        """

        while True:

            for attr in dir(self):
                attr_obj = getattr(self, attr)
                if attr.startswith('diagnose_') and callable(attr_obj):
                    attr_obj()

            print self.diagnostic_data, self.uptime_data

            time.sleep(1)

    def _percentage_between_timedeltas(self, td1, td2):
        # NOTE: Maybe remove rounding
        return int((td1.total_seconds() / td2.total_seconds()) * 100)

    def report_uptime(self, identifier, up):

        """
        Makes light work of logging up/down times.
        """

        now = datetime.datetime.now()

        if not identifier in self.uptime_data:
            self.uptime_data[identifier] = {}

        if 'last_check' in self.uptime_data[identifier]:

            if not 'duration' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['duration'] = datetime.timedelta()
            self.uptime_data[identifier]['duration'] += \
                now - self.uptime_data[identifier]['last_check']

            if up:
                if not 'uptime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['uptime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['uptime'] += \
                    now - self.uptime_data[identifier]['last_check']
            else:
                if not 'downtime' in self.uptime_data[identifier]:
                    self.uptime_data[identifier]['downtime'] = \
                        datetime.timedelta()
                self.uptime_data[identifier]['downtime'] += \
                    now - self.uptime_data[identifier]['last_check']

            if 'uptime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['uptime_percent'] = \
                        self._percentage_between_timedeltas(
                            self.uptime_data[identifier]['uptime'],
                            self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['uptime_percent'] = 0
            if 'downtime' in self.uptime_data[identifier]:
                self.uptime_data[identifier]['downtime_percent'] = \
                    self._percentage_between_timedeltas(
                        self.uptime_data[identifier]['downtime'],
                        self.uptime_data[identifier]['duration'])
            else:
                self.uptime_data[identifier]['downtime_percent'] = 0

        self.uptime_data[identifier]['last_check'] = now

    def file_contents(self, filepath):
        """
        Returns the contents of a file as a string.
        """
        try:
            f = open(filepath, 'r')
            contents = f.read()
            f.close()
            return contents
        except Exception, e:
            pass
        return ''
    
    def cmd(self, command_args):
        """
        Runs a command nice and easily.
        """
        try:
            return subprocess.check_output(command_args)
        except Exception, e:
            pass
        return ''

    def diagnose_camera_connectivity(self):

        """
        Checks the camera connection to ensure it's still there.
        """

        output = self.cmd(['/usr/bin/lsusb'])
        if 'Canon, Inc.' in output:
            connected = True
        else:
            connected = False

        self.diagnostic_data['camera_connected'] = connected

        self.report_uptime('camera', connected)

    def diagnose_gphoto_process(self):
        """
        Checks if Gphoto is still running.
        """

        output = self.cmd(['/bin/ps', 'aux'])
        if 'gphoto2 --port=usb' in output:
            running = True
        else:
            running = False

        self.diagnostic_data['gphoto_running'] = running

        self.report_uptime('gphoto', running)

    def diagnose_storage(self):
        """
        Checks the HDD is mounted and /home/cam1/ is writable.
        """
        pass

    def diagnose_pictures(self):
        """
        Checks last picture taken.
        """
        pass


if __name__ == '__main__':
    diagnostic = DiagnosticClient()
    diagnostic.run()
